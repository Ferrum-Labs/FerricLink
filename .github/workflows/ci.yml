name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check Rust version compatibility
  check-rust-version:
    name: Check Rust Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
        with:
          toolchain: 1.85.0

      - name: Verify Rust version
        run: |
          rustc --version
          cargo --version

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [1.85.0, stable, beta]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --all-features

  # Build and test
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust: 1.85.0
          - os: ubuntu-latest
            rust: stable
          - os: windows-latest
            rust: stable
          - os: macos-latest
            rust: stable
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Run tests with all features
        run: cargo test --verbose --all-features

      - name: Build examples
        run: cargo build --examples

  # Feature matrix testing
  test-features:
    name: Test Features
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - ""
          - "http"
          - "validation"
          - "all"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-features-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-features-
            ${{ runner.os }}-cargo-

      - name: Test with features
        run: |
          if [ -n "${{ matrix.features }}" ]; then
            cargo test --features "${{ matrix.features }}"
          else
            cargo test
          fi

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-docs-
            ${{ runner.os }}-cargo-

      - name: Build documentation
        run: cargo doc --all-features --no-deps

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc/

  # Benchmark (if benchmarks exist)
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: false  # Disabled until benchmarks are implemented
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-bench-
            ${{ runner.os }}-cargo-

      - name: Run benchmarks
        run: cargo bench

  # Release preparation
  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check version consistency
        run: |
          # Check that workspace version is properly set
          workspace_version=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "Workspace version: $workspace_version"
          
          # Check that crate uses workspace version
          if ! grep -q 'version.workspace = true' crates/ferriclink-core/Cargo.toml; then
            echo "Crate should use workspace version"
            exit 1
          fi
          
          echo "Version configuration is correct"

      - name: Check for unreleased changes
        run: |
          # Check if there are any unreleased changes in CHANGELOG
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "No unreleased section found in CHANGELOG.md"
            exit 1
          fi

      - name: Build release artifacts
        run: |
          cargo build --release --all-features
          cargo test --release --all-features

  # Notify on failure
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [check-rust-version, quality, test, test-features, security, docs]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "CI failed! Check the logs for details."
          # Add notification logic here (Slack, Discord, email, etc.)
