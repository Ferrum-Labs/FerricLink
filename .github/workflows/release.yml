name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [ "${{ github.event_name }}" = "push" ] && [ -n "$(git tag -l $VERSION)" ]; then
            echo "Tag $VERSION already exists"
            exit 1
          fi

      - name: Run tests
        run: |
          cargo test --all-features
          cargo build --release --all-features

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Create tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Extract changelog for this version
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            # Extract from version header to next version header
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
          else
            echo "## $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "### Changes" >> release_notes.md
            echo "- Bug fixes and improvements" >> release_notes.md
          fi
          
          # Set output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  # Build and publish crates
  publish:
    name: Publish Crates
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Configure git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish the core crate
          cd crates/ferriclink-core
          cargo publish --token $CARGO_REGISTRY_TOKEN

      - name: Wait for crates.io
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}
          
          # Wait for the crate to be available on crates.io
          for i in {1..30}; do
            if curl -s "https://crates.io/api/v1/crates/ferriclink-core/$VERSION_NUMBER" | grep -q "version"; then
              echo "Crate published successfully!"
              break
            fi
            echo "Waiting for crate to be available... ($i/30)"
            sleep 10
          done

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build documentation
        run: |
          cargo doc --all-features --no-deps
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs

  # Notify success
  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate, create-release, publish, update-docs]
    if: always()
    steps:
      - name: Notify release status
        run: |
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "Release ${{ needs.validate.outputs.version }} published successfully!"
            # Add notification logic here (Slack, Discord, email, etc.)
          else
            echo "Release failed!"
            exit 1
          fi
